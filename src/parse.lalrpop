// Copyright 2018 Ethan Pailes.
//
// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
// option. This file may not be copied, modified, or distributed
// except according to those terms.

use regex_syntax;
use regex_syntax::ast::RepetitionRange;
use lalrpop_util::ParseError;
use ast::{Expr, ExprKind, Span, BOp, UOp, StatementKind, Statement};
use error;
use error::{InternalError, ErrorKind};
use lex;
use util;

grammar<'input>;

extern {
    type Location = usize;
    type Error = error::InternalError;

    enum lex::Token<'input> {
        "regex literal" => lex::Token::RegexLit(<String>),
        "raw regex literal" => lex::Token::RawRegexLit(<&'input str>),
        "int" => lex::Token::IntLit(<i64>),
        "identifier" => lex::Token::Id(<&'input str>),

        "(" => lex::Token::OpenParen,
        ")" => lex::Token::CloseParen,

        "{" => lex::Token::OpenCurly,
        "}" => lex::Token::CloseCurly,
        "}?" => lex::Token::LazyCloseCurly,

        "*" => lex::Token::Star,
        "*?" => lex::Token::LazyStar,

        "+" => lex::Token::Plus,
        "+?" => lex::Token::LazyPlus,

        "," => lex::Token::Comma,
        ";" => lex::Token::Semi,
        "|" => lex::Token::Pipe,
        "." => lex::Token::Dot,
        "=" => lex::Token::Equals,
        "?" => lex::Token::Question,
        "??" => lex::Token::LazyQuestion,

        "<+>" => lex::Token::Add,
        "</>" => lex::Token::Div,
        "<*>" => lex::Token::Times,
        "-" => lex::Token::Minus,
        "%" => lex::Token::Percent,

        "as" => lex::Token::As,
        "cap" => lex::Token::Cap,
        "let" => lex::Token::Let,
        "fn" => lex::Token::FnKeyword,
        "return" => lex::Token::Return,
    }
}

pub BlockBody: Expr = {
    <l: @L> <s: (<Statement>)*> <e: Expr0> <r: @R> => {
        Expr {
            kind: ExprKind::Block(s, e),
            span: Span { start: l, end: r }
        }
    }
};

//////////////////////////////////////////////////////////////////////////
//                                                                      //
//                            Expressions                               //
//                                                                      //
//////////////////////////////////////////////////////////////////////////

Expr0: Box<Expr> = {
    <l: @L> <e:ExprKind0> <r: @R> =>
        Box::new(Expr::new(e, Span { start: l, end: r })),
    <l: @L> "{" <b:BlockBody> "}" <r: @R> =>
        Box::new(Expr::new(b.kind, Span { start: l, end: r })),
};
ExprKind0: ExprKind = {
    <e1:Expr0> "." <e2:Expr1> => ExprKind::BinOp(e1, BOp::Concat, e2),
    <e1:Expr0> "|" <e2:Expr1> => ExprKind::BinOp(e1, BOp::Alt, e2),

    ExprKind1
};

Expr1: Box<Expr> = {
    <l: @L> <e:ExprKind1> <r: @R> =>
        Box::new(Expr::new(e, Span { start: l, end: r }))
};
ExprKind1: ExprKind = {

    ExprKind2
};

Expr2: Box<Expr> = {
    <l: @L> <e:ExprKind2> <r: @R> =>
        Box::new(Expr::new(e, Span { start: l, end: r }))
};
ExprKind2: ExprKind = {
    "cap" <e:Expr3> "as" <name:"identifier"> =>
        ExprKind::Capture(e, Some(name.to_string())),

    ExprKind3
};

Expr3: Box<Expr> = {
    <l: @L> <e:ExprKind3> <r: @R> =>
        Box::new(Expr::new(e, Span { start: l, end: r }))
};
ExprKind3: ExprKind = {
    "cap" <e:Expr3> => ExprKind::Capture(e, None),

    ExprKind4,
};

Expr4: Box<Expr> = {
    <l: @L> <e:ExprKind4> <r: @R> =>
        Box::new(Expr::new(e, Span { start: l, end: r }))
};
ExprKind4: ExprKind = {

    ExprKind5,
};

Expr5: Box<Expr> = {
    <l: @L> <e:ExprKind5> <r: @R> =>
        Box::new(Expr::new(e, Span { start: l, end: r }))
};
ExprKind5: ExprKind = {
    //
    // Arith operators
    //
    "-" <e:Expr6> => ExprKind::UnaryOp(UOp::Neg, e),

    <e1:Expr5> "<+>" <e2:Expr6> => ExprKind::BinOp(e1, BOp::Plus, e2),
    <e1:Expr5> "<*>" <e2:Expr6> => ExprKind::BinOp(e1, BOp::Times, e2),
    <e1:Expr5> "</>" <e2:Expr6> => ExprKind::BinOp(e1, BOp::Div, e2),
    <e1:Expr5> "-" <e2:Expr6> => ExprKind::BinOp(e1, BOp::Minus, e2),
    <e1:Expr5> "%" <e2:Expr6> => ExprKind::BinOp(e1, BOp::Mod, e2),

    //
    // Regex operators
    //
    <e:Expr5> "*" => ExprKind::UnaryOp(UOp::RepeatZeroOrMore(true), e),
    <e:Expr5> "*?" => ExprKind::UnaryOp(UOp::RepeatZeroOrMore(false), e),
    <e:Expr5> "+" => ExprKind::UnaryOp(UOp::RepeatOneOrMore(true), e),
    <e:Expr5> "+?" => ExprKind::UnaryOp(UOp::RepeatOneOrMore(false), e),
    <e:Expr5> "?" => ExprKind::UnaryOp(UOp::RepeatZeroOrOne(true), e),
    <e:Expr5> "??" => ExprKind::UnaryOp(UOp::RepeatZeroOrOne(false), e),

    <e:Expr5> "{" <i:"int"> "}" =>
        ExprKind::UnaryOp(UOp::RepeatRange(
            false, RepetitionRange::Exactly(i as u32)), e),
    <e:Expr5> "{" <i:"int"> "," "}" =>
        ExprKind::UnaryOp(UOp::RepeatRange(
            false, RepetitionRange::AtLeast(i as u32)), e),
    <e:Expr5> "{" <i1:"int"> "," <i2:"int"> "}" =>
        ExprKind::UnaryOp(UOp::RepeatRange(
            false, RepetitionRange::Bounded(i1 as u32, i2 as u32)), e),

    <e:Expr5> "{" <i:"int"> "}?" =>
        ExprKind::UnaryOp(UOp::RepeatRange(
            true, RepetitionRange::Exactly(i as u32)), e),
    <e:Expr5> "{" <i:"int"> "," "}?" =>
        ExprKind::UnaryOp(UOp::RepeatRange(
            true, RepetitionRange::AtLeast(i as u32)), e),
    <e:Expr5> "{" <i1:"int"> "," <i2:"int"> "}?" =>
        ExprKind::UnaryOp(UOp::RepeatRange(
            true, RepetitionRange::Bounded(i1 as u32, i2 as u32)), e),

    ExprKind6,
};

Expr6: Box<Expr> = {
    <l: @L> <e:ExprKind6> <r: @R> =>
        Box::new(Expr::new(e, Span { start: l, end: r })),
};
ExprKind6: ExprKind = {
    <r:RegexLiteral> => ExprKind::RegexLiteral(r),
    <int:"int"> => ExprKind::IntLiteral(int),
    <var:"identifier"> => ExprKind::Var(var.to_string()),

    "fn" "(" <args: Comma<"identifier">> ")" "{" <body: BlockBody> "}" =>
        util::construct_lambda(args, body),

    <func: Expr6> "(" <args: Comma<Expr0>> ")" => {
        ExprKind::Apply {
            func: func,
            args: args,
        }
    },

    "(" <ExprKind0> ")",
};

LValue: Box<Expr> = {
    <l: @L> <e:LValueKind> <r: @R> =>
        Box::new(Expr::new(e, Span { start: l, end: r })),
};
LValueKind: ExprKind = {
    <var:"identifier"> => ExprKind::Var(var.to_string()),
};

RegexLiteral: Box<regex_syntax::ast::Ast> = {

    // raw regex literals
    <l: @L> <s:"raw regex literal"> <r: @R> =>? {
        use regex_syntax::ast::parse::Parser;
        match Parser::new().parse(&regex_syntax::escape(s)) {
            Ok(re) => Ok(Box::new(re)),
            Err(err) => Err(ParseError::User {
                error: InternalError::new(
                    ErrorKind::RegexError {
                        re: String::from(s),
                        err: format!("{}", err),
                    },
                    Span { start: l, end: r }),
            }),
        }
    },

    // regex literals
    <l: @L> <s:"regex literal"> <r: @R> =>? {
        use regex_syntax::ast::parse::Parser;
        match Parser::new().parse(&s) {
            Ok(re) => Ok(Box::new(re)),
            Err(err) => Err(ParseError::User {
                error: InternalError::new(
                    ErrorKind::RegexError {
                        re: s,
                        err: format!("{}", err),
                    },
                    Span { start: l, end: r }),
            }),
        }
    },
};

//////////////////////////////////////////////////////////////////////////
//                                                                      //
//                            Statements                                //
//                                                                      //
//////////////////////////////////////////////////////////////////////////

Statement: Statement = {
    <l: @L> <s:StatementKind> <r: @R> =>
        Statement::new(s, Span { start: l, end: r })
};
StatementKind: StatementKind = {
    "let" <id:"identifier"> "=" <e:Expr0> ";" => {
        StatementKind::LetBinding(id.to_string(), e)
    },
    <lv:LValue> "=" <e:Expr0> ";" => {
        StatementKind::Assign(lv, e)
    },

    <l: @L> "fn" <name: "identifier"> "("
        <args: Comma<"identifier">>
    ")" "{" <body: BlockBody> "}" <r: @R> => {
        StatementKind::LetBinding(
            name.to_string(),
            Box::new(Expr::new(
                util::construct_lambda(args, body),
                Span { start: l, end: r },
            ))
        )
    },

    <e:Expr0> ";" => StatementKind::Expr(e),
};

//////////////////////////////////////////////////////////////////////////
//                                                                      //
//                            Utilities                                 //
//                                                                      //
//////////////////////////////////////////////////////////////////////////

Comma<Rule>: Vec<Rule> =
    <rules: (<Rule> ",")*> <last: Rule?> => {
        let mut rules = rules;
        rules.extend(last);
        rules
    };

Comma1<Rule>: Vec<Rule> =
    <rules: (<Rule> ",")+> <last: Rule?> => {
        let mut rules = rules;
        rules.extend(last);
        rules
    };
